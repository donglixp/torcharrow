Search.setIndex({"docnames": ["column", "dataframe", "functional", "generated/torcharrow.Column.all", "generated/torcharrow.Column.any", "generated/torcharrow.Column.append", "generated/torcharrow.Column.cast", "generated/torcharrow.Column.drop_duplicates", "generated/torcharrow.Column.drop_null", "generated/torcharrow.Column.fill_null", "generated/torcharrow.Column.filter", "generated/torcharrow.Column.flatmap", "generated/torcharrow.Column.head", "generated/torcharrow.Column.is_valid_at", "generated/torcharrow.Column.isin", "generated/torcharrow.Column.map", "generated/torcharrow.Column.tail", "generated/torcharrow.Column.to_arrow", "generated/torcharrow.Column.to_pandas", "generated/torcharrow.Column.to_pylist", "generated/torcharrow.Column.to_tensor", "generated/torcharrow.Column.transform", "generated/torcharrow.DataFrame.all", "generated/torcharrow.DataFrame.any", "generated/torcharrow.DataFrame.append", "generated/torcharrow.DataFrame.describe", "generated/torcharrow.DataFrame.drop", "generated/torcharrow.DataFrame.drop_duplicates", "generated/torcharrow.DataFrame.drop_null", "generated/torcharrow.DataFrame.fill_null", "generated/torcharrow.DataFrame.filter", "generated/torcharrow.DataFrame.flatmap", "generated/torcharrow.DataFrame.head", "generated/torcharrow.DataFrame.isin", "generated/torcharrow.DataFrame.log", "generated/torcharrow.DataFrame.map", "generated/torcharrow.DataFrame.max", "generated/torcharrow.DataFrame.mean", "generated/torcharrow.DataFrame.median", "generated/torcharrow.DataFrame.min", "generated/torcharrow.DataFrame.rename", "generated/torcharrow.DataFrame.reorder", "generated/torcharrow.DataFrame.select", "generated/torcharrow.DataFrame.sort", "generated/torcharrow.DataFrame.std", "generated/torcharrow.DataFrame.sum", "generated/torcharrow.DataFrame.tail", "generated/torcharrow.DataFrame.to_arrow", "generated/torcharrow.DataFrame.to_pandas", "generated/torcharrow.DataFrame.to_pylist", "generated/torcharrow.DataFrame.to_tensor", "generated/torcharrow.DataFrame.transform", "generated/torcharrow.DataFrame.where", "generated/torcharrow.NumericalColumn.abs", "generated/torcharrow.NumericalColumn.ceil", "generated/torcharrow.NumericalColumn.describe", "generated/torcharrow.NumericalColumn.floor", "generated/torcharrow.NumericalColumn.log", "generated/torcharrow.NumericalColumn.max", "generated/torcharrow.NumericalColumn.mean", "generated/torcharrow.NumericalColumn.median", "generated/torcharrow.NumericalColumn.min", "generated/torcharrow.NumericalColumn.round", "generated/torcharrow.NumericalColumn.std", "generated/torcharrow.NumericalColumn.sum", "generated/torcharrow.column", "generated/torcharrow.concat", "generated/torcharrow.dataframe", "generated/torcharrow.from_arrow", "generated/torcharrow.functional.add_tokens", "generated/torcharrow.functional.bucketize", "generated/torcharrow.functional.firstx", "generated/torcharrow.functional.get_cosine_similarity", "generated/torcharrow.functional.get_jaccard_similarity", "generated/torcharrow.functional.get_max_count", "generated/torcharrow.functional.get_score_max", "generated/torcharrow.functional.get_score_min", "generated/torcharrow.functional.get_score_sum", "generated/torcharrow.functional.has_id_overlap", "generated/torcharrow.functional.id_overlap_count", "generated/torcharrow.functional.scale_to_0_1", "generated/torcharrow.functional.sigrid_hash", "generated/torcharrow.if_else", "generated/torcharrow.ilist_column.ListMethods.length", "generated/torcharrow.ilist_column.ListMethods.slice", "generated/torcharrow.ilist_column.ListMethods.vmap", "generated/torcharrow.istring_column.StringMethods.contains", "generated/torcharrow.istring_column.StringMethods.count", "generated/torcharrow.istring_column.StringMethods.endswith", "generated/torcharrow.istring_column.StringMethods.find", "generated/torcharrow.istring_column.StringMethods.findall", "generated/torcharrow.istring_column.StringMethods.isalnum", "generated/torcharrow.istring_column.StringMethods.isalpha", "generated/torcharrow.istring_column.StringMethods.isdecimal", "generated/torcharrow.istring_column.StringMethods.isdigit", "generated/torcharrow.istring_column.StringMethods.islower", "generated/torcharrow.istring_column.StringMethods.isnumeric", "generated/torcharrow.istring_column.StringMethods.isspace", "generated/torcharrow.istring_column.StringMethods.istitle", "generated/torcharrow.istring_column.StringMethods.isupper", "generated/torcharrow.istring_column.StringMethods.length", "generated/torcharrow.istring_column.StringMethods.lower", "generated/torcharrow.istring_column.StringMethods.match", "generated/torcharrow.istring_column.StringMethods.replace", "generated/torcharrow.istring_column.StringMethods.slice", "generated/torcharrow.istring_column.StringMethods.split", "generated/torcharrow.istring_column.StringMethods.startswith", "generated/torcharrow.istring_column.StringMethods.strip", "generated/torcharrow.istring_column.StringMethods.upper", "index", "torcharrow"], "filenames": ["column.rst", "dataframe.rst", "functional.rst", "generated/torcharrow.Column.all.rst", "generated/torcharrow.Column.any.rst", "generated/torcharrow.Column.append.rst", "generated/torcharrow.Column.cast.rst", "generated/torcharrow.Column.drop_duplicates.rst", "generated/torcharrow.Column.drop_null.rst", "generated/torcharrow.Column.fill_null.rst", "generated/torcharrow.Column.filter.rst", "generated/torcharrow.Column.flatmap.rst", "generated/torcharrow.Column.head.rst", "generated/torcharrow.Column.is_valid_at.rst", "generated/torcharrow.Column.isin.rst", "generated/torcharrow.Column.map.rst", "generated/torcharrow.Column.tail.rst", "generated/torcharrow.Column.to_arrow.rst", "generated/torcharrow.Column.to_pandas.rst", "generated/torcharrow.Column.to_pylist.rst", "generated/torcharrow.Column.to_tensor.rst", "generated/torcharrow.Column.transform.rst", "generated/torcharrow.DataFrame.all.rst", "generated/torcharrow.DataFrame.any.rst", "generated/torcharrow.DataFrame.append.rst", "generated/torcharrow.DataFrame.describe.rst", "generated/torcharrow.DataFrame.drop.rst", "generated/torcharrow.DataFrame.drop_duplicates.rst", "generated/torcharrow.DataFrame.drop_null.rst", "generated/torcharrow.DataFrame.fill_null.rst", "generated/torcharrow.DataFrame.filter.rst", "generated/torcharrow.DataFrame.flatmap.rst", "generated/torcharrow.DataFrame.head.rst", "generated/torcharrow.DataFrame.isin.rst", "generated/torcharrow.DataFrame.log.rst", "generated/torcharrow.DataFrame.map.rst", "generated/torcharrow.DataFrame.max.rst", "generated/torcharrow.DataFrame.mean.rst", "generated/torcharrow.DataFrame.median.rst", "generated/torcharrow.DataFrame.min.rst", "generated/torcharrow.DataFrame.rename.rst", "generated/torcharrow.DataFrame.reorder.rst", "generated/torcharrow.DataFrame.select.rst", "generated/torcharrow.DataFrame.sort.rst", "generated/torcharrow.DataFrame.std.rst", "generated/torcharrow.DataFrame.sum.rst", "generated/torcharrow.DataFrame.tail.rst", "generated/torcharrow.DataFrame.to_arrow.rst", "generated/torcharrow.DataFrame.to_pandas.rst", "generated/torcharrow.DataFrame.to_pylist.rst", "generated/torcharrow.DataFrame.to_tensor.rst", "generated/torcharrow.DataFrame.transform.rst", "generated/torcharrow.DataFrame.where.rst", "generated/torcharrow.NumericalColumn.abs.rst", "generated/torcharrow.NumericalColumn.ceil.rst", "generated/torcharrow.NumericalColumn.describe.rst", "generated/torcharrow.NumericalColumn.floor.rst", "generated/torcharrow.NumericalColumn.log.rst", "generated/torcharrow.NumericalColumn.max.rst", "generated/torcharrow.NumericalColumn.mean.rst", "generated/torcharrow.NumericalColumn.median.rst", "generated/torcharrow.NumericalColumn.min.rst", "generated/torcharrow.NumericalColumn.round.rst", "generated/torcharrow.NumericalColumn.std.rst", "generated/torcharrow.NumericalColumn.sum.rst", "generated/torcharrow.column.rst", "generated/torcharrow.concat.rst", "generated/torcharrow.dataframe.rst", "generated/torcharrow.from_arrow.rst", "generated/torcharrow.functional.add_tokens.rst", "generated/torcharrow.functional.bucketize.rst", "generated/torcharrow.functional.firstx.rst", "generated/torcharrow.functional.get_cosine_similarity.rst", "generated/torcharrow.functional.get_jaccard_similarity.rst", "generated/torcharrow.functional.get_max_count.rst", "generated/torcharrow.functional.get_score_max.rst", "generated/torcharrow.functional.get_score_min.rst", "generated/torcharrow.functional.get_score_sum.rst", "generated/torcharrow.functional.has_id_overlap.rst", "generated/torcharrow.functional.id_overlap_count.rst", "generated/torcharrow.functional.scale_to_0_1.rst", "generated/torcharrow.functional.sigrid_hash.rst", "generated/torcharrow.if_else.rst", "generated/torcharrow.ilist_column.ListMethods.length.rst", "generated/torcharrow.ilist_column.ListMethods.slice.rst", "generated/torcharrow.ilist_column.ListMethods.vmap.rst", "generated/torcharrow.istring_column.StringMethods.contains.rst", "generated/torcharrow.istring_column.StringMethods.count.rst", "generated/torcharrow.istring_column.StringMethods.endswith.rst", "generated/torcharrow.istring_column.StringMethods.find.rst", "generated/torcharrow.istring_column.StringMethods.findall.rst", "generated/torcharrow.istring_column.StringMethods.isalnum.rst", "generated/torcharrow.istring_column.StringMethods.isalpha.rst", "generated/torcharrow.istring_column.StringMethods.isdecimal.rst", "generated/torcharrow.istring_column.StringMethods.isdigit.rst", "generated/torcharrow.istring_column.StringMethods.islower.rst", "generated/torcharrow.istring_column.StringMethods.isnumeric.rst", "generated/torcharrow.istring_column.StringMethods.isspace.rst", "generated/torcharrow.istring_column.StringMethods.istitle.rst", "generated/torcharrow.istring_column.StringMethods.isupper.rst", "generated/torcharrow.istring_column.StringMethods.length.rst", "generated/torcharrow.istring_column.StringMethods.lower.rst", "generated/torcharrow.istring_column.StringMethods.match.rst", "generated/torcharrow.istring_column.StringMethods.replace.rst", "generated/torcharrow.istring_column.StringMethods.slice.rst", "generated/torcharrow.istring_column.StringMethods.split.rst", "generated/torcharrow.istring_column.StringMethods.startswith.rst", "generated/torcharrow.istring_column.StringMethods.strip.rst", "generated/torcharrow.istring_column.StringMethods.upper.rst", "index.rst", "torcharrow.rst"], "titles": ["torcharrow.Column", "torcharrow.DataFrame", "torcharrow.functional", "torcharrow.Column.all", "torcharrow.Column.any", "torcharrow.Column.append", "torcharrow.Column.cast", "torcharrow.Column.drop_duplicates", "torcharrow.Column.drop_null", "torcharrow.Column.fill_null", "torcharrow.Column.filter", "torcharrow.Column.flatmap", "torcharrow.Column.head", "torcharrow.Column.is_valid_at", "torcharrow.Column.isin", "torcharrow.Column.map", "torcharrow.Column.tail", "torcharrow.Column.to_arrow", "torcharrow.Column.to_pandas", "torcharrow.Column.to_pylist", "torcharrow.Column.to_tensor", "torcharrow.Column.transform", "torcharrow.DataFrame.all", "torcharrow.DataFrame.any", "torcharrow.DataFrame.append", "torcharrow.DataFrame.describe", "torcharrow.DataFrame.drop", "torcharrow.DataFrame.drop_duplicates", "torcharrow.DataFrame.drop_null", "torcharrow.DataFrame.fill_null", "torcharrow.DataFrame.filter", "torcharrow.DataFrame.flatmap", "torcharrow.DataFrame.head", "torcharrow.DataFrame.isin", "torcharrow.DataFrame.log", "torcharrow.DataFrame.map", "torcharrow.DataFrame.max", "torcharrow.DataFrame.mean", "torcharrow.DataFrame.median", "torcharrow.DataFrame.min", "torcharrow.DataFrame.rename", "torcharrow.DataFrame.reorder", "torcharrow.DataFrame.select", "torcharrow.DataFrame.sort", "torcharrow.DataFrame.std", "torcharrow.DataFrame.sum", "torcharrow.DataFrame.tail", "torcharrow.DataFrame.to_arrow", "torcharrow.DataFrame.to_pandas", "torcharrow.DataFrame.to_pylist", "torcharrow.DataFrame.to_tensor", "torcharrow.DataFrame.transform", "torcharrow.DataFrame.where", "torcharrow.NumericalColumn.abs", "torcharrow.NumericalColumn.ceil", "torcharrow.NumericalColumn.describe", "torcharrow.NumericalColumn.floor", "torcharrow.NumericalColumn.log", "torcharrow.NumericalColumn.max", "torcharrow.NumericalColumn.mean", "torcharrow.NumericalColumn.median", "torcharrow.NumericalColumn.min", "torcharrow.NumericalColumn.round", "torcharrow.NumericalColumn.std", "torcharrow.NumericalColumn.sum", "torcharrow.column", "torcharrow.concat", "torcharrow.dataframe", "torcharrow.from_arrow", "torcharrow.functional.add_tokens", "torcharrow.functional.bucketize", "torcharrow.functional.firstx", "torcharrow.functional.get_cosine_similarity", "torcharrow.functional.get_jaccard_similarity", "torcharrow.functional.get_max_count", "torcharrow.functional.get_score_max", "torcharrow.functional.get_score_min", "torcharrow.functional.get_score_sum", "torcharrow.functional.has_id_overlap", "torcharrow.functional.id_overlap_count", "torcharrow.functional.scale_to_0_1", "torcharrow.functional.sigrid_hash", "torcharrow.if_else", "torcharrow.ilist_column.ListMethods.length", "torcharrow.ilist_column.ListMethods.slice", "torcharrow.ilist_column.ListMethods.vmap", "torcharrow.istring_column.StringMethods.contains", "torcharrow.istring_column.StringMethods.count", "torcharrow.istring_column.StringMethods.endswith", "torcharrow.istring_column.StringMethods.find", "torcharrow.istring_column.StringMethods.findall", "torcharrow.istring_column.StringMethods.isalnum", "torcharrow.istring_column.StringMethods.isalpha", "torcharrow.istring_column.StringMethods.isdecimal", "torcharrow.istring_column.StringMethods.isdigit", "torcharrow.istring_column.StringMethods.islower", "torcharrow.istring_column.StringMethods.isnumeric", "torcharrow.istring_column.StringMethods.isspace", "torcharrow.istring_column.StringMethods.istitle", "torcharrow.istring_column.StringMethods.isupper", "torcharrow.istring_column.StringMethods.length", "torcharrow.istring_column.StringMethods.lower", "torcharrow.istring_column.StringMethods.match", "torcharrow.istring_column.StringMethods.replace", "torcharrow.istring_column.StringMethods.slice", "torcharrow.istring_column.StringMethods.split", "torcharrow.istring_column.StringMethods.startswith", "torcharrow.istring_column.StringMethods.strip", "torcharrow.istring_column.StringMethods.upper", "TorchArrow Documentation", "torcharrow"], "terms": {"A": [0, 10, 25, 30, 42, 52, 67, 92, 93, 96], "i": [0, 1, 2, 4, 5, 8, 10, 13, 14, 15, 21, 23, 24, 28, 30, 33, 35, 42, 51, 52, 62, 67, 69, 70, 73, 75, 76, 77, 80, 81, 82, 84, 86, 92, 93, 95, 96, 99, 109], "1": [0, 2, 5, 8, 9, 10, 12, 14, 15, 16, 20, 24, 25, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 52, 55, 58, 59, 61, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 105], "dimens": 0, "torch": [0, 21, 51, 109], "tensor": [0, 20, 50, 109], "like": [0, 1, 14, 21, 25, 33, 43, 51, 55, 65, 109], "structur": [0, 110], "contain": [0, 14, 19, 20, 33, 49, 50, 80, 93, 110], "element": [0, 3, 4, 14, 15, 22, 23, 33, 34, 35, 53, 57, 71, 82, 83, 84, 88, 100, 104, 106], "singl": [0, 80], "It": [0, 109, 110], "also": [0, 1, 15, 35, 75, 76, 77, 109, 110], "support": [0, 15, 35, 65, 67, 84, 105, 109], "non": [0, 3, 4, 13, 15, 22, 23, 35, 36, 37, 38, 39, 43, 44, 45, 58, 59, 61, 64, 65, 95, 99], "numer": [0, 25, 70, 81, 94, 96], "string": [0, 2, 5, 10, 15, 24, 25, 30, 35, 42, 52, 65, 67, 82, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 105, 106, 107, 108], "list": [0, 2, 5, 7, 10, 11, 12, 14, 15, 16, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 35, 41, 43, 46, 49, 50, 51, 55, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 85, 105], "struct": [0, 12, 14, 15, 16, 20, 25, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 52, 67, 85], "defin": [0, 15, 25, 35, 55, 65, 67, 70, 72, 81, 110], "follow": 0, "which": [0, 1, 10, 14, 15, 25, 30, 33, 35, 55, 65, 67], "modul": 0, "dtype": [0, 1, 2, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 20, 21, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 51, 52, 55, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 85, 105], "abbrevi": 0, "dt": [0, 5, 11, 15, 24, 31, 35, 65, 67, 85], "tabl": [0, 47, 68, 81], "below": 0, "32": 0, "bit": 0, "float": [0, 9, 29, 70], "point": [0, 62], "float32": [0, 25, 34, 37, 38, 44, 72, 73, 74, 75, 76, 77, 78, 79], "nullabl": [0, 2, 15, 34, 35, 36, 37, 38, 39, 44, 45, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 85], "64": 0, "float64": [0, 65], "8": [0, 15, 25, 34, 35, 36, 39, 45, 65, 70, 71, 73, 74, 78, 79, 81], "sign": 0, "integ": 0, "int8": 0, "16": 0, "int16": 0, "int32": [0, 70], "int64": [0, 2, 8, 9, 12, 14, 15, 16, 20, 28, 29, 32, 35, 36, 39, 42, 43, 45, 46, 50, 52, 65, 67, 69, 71, 81, 85], "boolean": [0, 10, 14, 30, 33, 69, 86], "item_dtyp": [0, 65], "field": [0, 12, 14, 15, 16, 20, 25, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 52, 67, 85], "devic": [0, 1, 2, 65, 67, 68, 82, 109], "alloc": [0, 1, 65], "length": [0, 1, 2, 5, 8, 9, 10, 15, 24, 28, 29, 30, 35, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 85, 105], "return": [0, 1, 3, 4, 5, 8, 9, 12, 13, 14, 15, 16, 22, 23, 24, 26, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 57, 58, 59, 60, 61, 63, 64, 66, 71, 72, 73, 75, 76, 77, 78, 79, 80, 82, 86, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 105], "number": [0, 1, 12, 16, 32, 46, 62, 71, 74, 79, 91, 105], "row": [0, 1, 7, 8, 9, 10, 11, 12, 15, 16, 21, 27, 28, 29, 30, 31, 32, 35, 46, 51, 52], "includ": [0, 1, 2, 25, 52, 55, 107], "null": [0, 1, 3, 4, 8, 9, 13, 15, 22, 23, 28, 29, 35, 36, 37, 38, 39, 43, 44, 45, 58, 59, 61, 64], "valu": [0, 1, 5, 7, 8, 9, 14, 15, 24, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 67, 70, 71, 80, 81, 82], "null_count": [0, 2, 5, 8, 9, 10, 12, 14, 15, 16, 20, 24, 25, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 52, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 85, 105], "python": [1, 15, 19, 21, 35, 49, 51, 109], "librari": 1, "built": 1, "apach": 1, "arrow": [1, 17, 47, 68, 109, 110], "columnar": 1, "memori": [1, 65], "format": [1, 21, 51, 109, 110], "load": 1, "join": [1, 105], "aggreg": 1, "filter": [1, 15, 35, 52], "otherwis": [1, 78, 91, 92, 93, 94, 95, 96, 97, 98, 99], "manipul": 1, "provid": [1, 10, 15, 25, 30, 35, 67, 110], "panda": [1, 10, 18, 30, 48, 52], "natur": [1, 34, 57], "fit": 1, "ml": 1, "ecosystem": 1, "familiar": 1, "scientist": 1, "engin": 1, "so": 1, "thei": 1, "can": [1, 15, 20, 35, 42, 50, 52, 67, 109], "us": [1, 8, 9, 10, 15, 20, 25, 28, 29, 30, 35, 42, 43, 50, 52, 55, 65, 67, 81, 110], "express": [1, 42, 52, 102, 105], "tabular": [1, 110], "workflow": 1, "featur": [1, 70, 109], "train": 1, "infer": [1, 65, 67], "preprocess": [1, 109], "column": [1, 2, 24, 25, 26, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 51, 55, 57, 58, 59, 61, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 89, 100, 101, 103, 104, 105, 107, 108, 109], "The": [1, 20, 21, 25, 42, 50, 51, 67, 73, 110], "label": 1, "ar": [2, 3, 5, 8, 15, 22, 24, 25, 28, 35, 65, 67, 74, 91, 92, 93, 94, 96, 97, 109], "here": [2, 25, 65], "an": [2, 10, 15, 25, 30, 35, 52, 81, 92, 98, 109], "exampl": [2, 5, 8, 9, 10, 12, 14, 15, 16, 20, 24, 25, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 52, 55, 58, 59, 61, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 85, 105], "usag": 2, "lpad": 2, "import": [2, 5, 8, 9, 12, 14, 15, 16, 20, 24, 25, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 52, 55, 58, 59, 61, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 85, 105], "ta": [2, 5, 8, 9, 10, 12, 14, 15, 16, 20, 24, 25, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 52, 55, 58, 59, 61, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 85, 105], "from": [2, 7, 10, 15, 20, 25, 27, 30, 35, 42, 50, 52, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 93, 104, 107], "col": [2, 71, 80, 85], "abc": 2, "x": [2, 10, 15, 30, 35, 71], "yz": 2, "": [2, 8, 9, 28, 29, 42, 52, 58, 59, 61, 63, 64, 65, 105], "http": 2, "facebookincub": 2, "github": 2, "io": 2, "html": 2, "5": [2, 12, 14, 15, 16, 20, 25, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 50, 55, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 85], "123": 2, "0": [2, 5, 8, 9, 10, 12, 14, 15, 16, 20, 24, 25, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 52, 55, 59, 62, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 93, 105], "12abc": 2, "1231x": 2, "2": [2, 5, 8, 9, 10, 12, 15, 16, 20, 24, 25, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 52, 55, 58, 59, 61, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 85, 105], "123yz": 2, "true": [2, 3, 4, 10, 15, 22, 23, 30, 33, 34, 35, 36, 37, 38, 39, 43, 44, 45, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103], "3": [2, 5, 8, 9, 10, 15, 20, 24, 25, 28, 29, 30, 33, 34, 35, 37, 38, 42, 44, 50, 52, 55, 59, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 85], "cpu": [2, 65, 67, 82], "anoth": 2, "arrai": [2, 14, 17, 25, 33, 43, 55, 65, 68, 110], "array_except": 2, "col1": 2, "col2": 2, "4": [2, 8, 9, 10, 15, 20, 25, 28, 29, 30, 33, 34, 35, 36, 39, 42, 45, 50, 52, 55, 58, 61, 64, 65, 67, 69, 70, 72, 74, 75, 76, 77, 81, 82, 85], "6": [2, 12, 15, 16, 25, 32, 33, 34, 35, 36, 37, 39, 43, 45, 46, 55, 59, 67, 70, 81, 85], "whether": [3, 4, 13, 14, 22, 23, 33, 69], "datafram": [5, 12, 14, 15, 16, 20, 68, 109, 110], "paramet": [5, 8, 9, 10, 12, 14, 15, 16, 20, 24, 25, 28, 29, 30, 32, 33, 35, 42, 43, 46, 50, 55, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 84, 105], "sf": [5, 24, 65], "hello": [5, 24, 65], "world": [5, 24, 65, 105], "how": [5, 8, 24, 28, 65], "you": [5, 24, 65, 67], "am": [5, 24], "fine": [5, 24], "given": [6, 52, 62, 105, 109], "subset": [7, 27], "ty": [7, 8, 11, 15, 27, 28, 31, 35, 43], "union": [7, 9, 10, 11, 14, 15, 26, 27, 29, 30, 31, 33, 35, 65, 67, 68, 69, 70, 73], "str": [7, 9, 10, 11, 15, 21, 26, 27, 29, 30, 31, 35, 40, 41, 43, 51, 65, 67, 68, 69, 86, 87, 90, 101, 102, 103, 105, 108], "liter": [7, 8, 11, 15, 27, 28, 31, 35, 43, 105], "none": [7, 8, 9, 10, 11, 15, 20, 21, 25, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 43, 44, 45, 50, 51, 55, 58, 59, 61, 64, 65, 67, 68, 84, 85, 104, 105], "keep": [7, 10, 27, 30, 42], "first": [7, 12, 16, 27, 32, 43, 46, 71, 72, 73, 74, 75, 76, 77, 78, 79], "last": [7, 12, 16, 27, 32, 43, 46], "fals": [7, 10, 27, 30, 33, 65, 82, 91, 92, 93, 94, 95, 96, 97, 98, 99], "experiment": [7, 13, 27, 41, 85], "api": [7, 13, 27, 41, 85], "remov": [7, 8, 9, 26, 27, 28, 29, 42, 107], "duplic": [7, 27], "frame": [7, 8, 9, 27, 28, 29], "ani": [8, 28, 67], "all": [8, 10, 25, 28, 30, 42, 43, 75, 76, 77, 90, 91, 92, 93, 94, 96, 97, 105], "where": [8, 9, 10, 15, 28, 29, 30, 35, 65, 67, 82], "ha": [8, 28, 67, 71, 75, 76, 77], "default": [8, 10, 15, 20, 21, 25, 28, 30, 35, 43, 50, 51, 55, 62, 65, 67, 84, 105], "If": [8, 10, 15, 21, 25, 28, 30, 35, 43, 51, 55, 62, 65, 67, 74, 80], "drop": [8, 28], "icolumn": [8, 9, 12, 16, 28, 29, 32, 46], "fill_nul": [8, 28], "fill": [8, 9, 28, 29], "na": [8, 28], "nan": [8, 28], "specifi": [8, 9, 15, 28, 29, 35, 62], "method": [8, 9, 15, 20, 28, 29, 35, 50], "fill_valu": [9, 29], "int": [9, 12, 15, 16, 29, 32, 35, 46, 62, 69, 70, 71, 81, 84, 104, 105], "bool": [9, 29, 43, 69, 86, 103], "dict": [9, 11, 14, 15, 20, 29, 31, 33, 35, 40, 50, 67], "drop_nul": [9, 29], "999": [9, 29, 55], "predic": [10, 30], "callabl": [10, 11, 15, 21, 30, 31, 35, 51, 85], "iter": [10, 30, 65, 67], "option": [10, 11, 15, 21, 25, 30, 31, 35, 43, 51, 55, 65, 67, 68, 84, 104], "select": [10, 15, 30, 35, 65, 67, 82], "differ": [10, 15, 30, 35], "function": [10, 15, 30, 35, 109], "same": [10, 30], "n": [10, 12, 15, 16, 30, 32, 35, 46, 105], "ari": [10, 30], "argument": [10, 30, 42], "name": [10, 15, 20, 30, 35, 40, 42, 50, 67], "invok": [10, 15, 21, 30, 35, 51], "appli": [10, 30, 70, 81], "map": [10, 11, 20, 21, 30, 31, 50, 51, 65, 85], "reduc": [10, 30], "flatmap": [10, 15, 30, 35], "lambda": [10, 15, 30, 35, 85], "arg": [11, 15, 31, 35, 42], "na_act": [11, 15, 31, 35], "ignor": [11, 15, 25, 31, 35], "accord": [11, 15, 31, 35, 105], "input": [11, 15, 21, 31, 35, 51, 69, 70, 71, 78, 81], "correspond": [11, 15, 31, 35, 75, 76, 77, 82], "requir": [11, 15, 21, 31, 35, 51], "result": [11, 15, 21, 25, 31, 35, 51], "type": [11, 14, 15, 20, 21, 25, 31, 33, 35, 50, 51, 65, 67, 77, 109], "item": [11, 15, 21, 31, 35, 51, 74, 86, 90], "tail": [12, 32], "df": [12, 14, 16, 20, 25, 32, 33, 34, 36, 37, 38, 39, 43, 44, 45, 46, 50, 52, 67, 85], "rang": [12, 14, 16, 32, 43, 46, 67, 80, 81], "7": [12, 14, 16, 25, 32, 37, 38, 43, 44, 45, 46, 55, 64, 67, 70, 81], "b": [12, 14, 15, 16, 25, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 52, 67, 85], "revers": [12, 14, 16, 32, 43, 46, 67], "c": [12, 14, 15, 16, 32, 35, 42, 43, 46, 52, 67, 85], "index": [12, 13, 14, 15, 16, 20, 25, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 52, 55, 67, 81, 109], "d": [12, 14, 16, 32, 42, 43, 46, 67], "99": [12, 32, 43, 67], "100": [12, 32, 43, 67, 81], "count": [12, 14, 15, 16, 20, 25, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 52, 55, 67, 74], "data": [13, 15, 25, 35, 60, 62, 63, 65, 67, 68, 80, 109, 110], "valid": [13, 65, 67, 81], "e": 13, "check": [14, 33], "each": [14, 15, 33, 34, 35, 36, 37, 38, 39, 44, 45, 53, 54, 56, 62, 82, 83, 84, 86, 87, 88, 89, 90, 96, 98, 100, 102, 103, 104, 106, 107], "presenc": [14, 33], "indic": [14, 69, 89], "104": [14, 67], "thi": [15, 35, 42, 67, 69, 70, 81, 109], "becom": [15, 35], "treat": [15, 35], "user": [15, 35, 109], "udf": [15, 35], "must": [15, 35], "global": [15, 35], "class": [15, 35, 109], "instanc": [15, 35, 74], "your": [15, 35], "effici": [15, 35], "improv": [15, 35, 109], "avoid": [15, 35], "call": [15, 35], "awai": [15, 35], "forc": [15, 35, 65, 67], "output": [15, 35], "determin": [15, 35, 69, 102], "111": [15, 35, 67], "defaultdict": [15, 35], "miss": [15, 21, 35, 51], "collect": [15, 35], "suppli": [15, 35, 65, 67], "def": [15, 35], "add_ten": [15, 35], "num": [15, 35], "10": [15, 25, 35, 37, 42, 52, 70, 81], "11": [15, 35, 42, 52, 65, 67, 70, 81], "12": [15, 35, 42, 52], "14": [15, 35], "note": [15, 35], "abov": [15, 35], "would": [15, 35], "fail": [15, 35], "error": [15, 35], "sinc": [15, 35], "addten": [15, 35], "To": [15, 35], "pass": [15, 21, 35, 51], "need": [15, 35, 109], "prepar": [15, 35], "add_ten_or_0": [15, 35], "els": [15, 35, 43], "over": [15, 35, 110], "get": [15, 35], "whole": [15, 35], "tupl": [15, 35, 67], "add_unari": [15, 35], "tup": [15, 35], "multi": [15, 35], "add_binari": [15, 35], "more": [15, 35], "than": [15, 35], "one": [15, 35, 65, 92, 93, 109], "known": [15, 35], "mandatori": [15, 35], "17": [15, 35, 42], "29": [15, 35], "30": [15, 35], "divmod": [15, 35], "quotient": [15, 35], "remaind": [15, 35], "state": [15, 35], "written": [15, 35], "captur": [15, 35], "deleg": [15, 35], "fib": [15, 35], "elif": [15, 35], "dataclass": [15, 35], "__post_init__": [15, 35], "self": [15, 17, 18, 35, 42, 47, 48, 52], "add_fib": [15, 35], "m": [15, 35], "56": [15, 35], "57": [15, 35], "58": [15, 35], "head": [16, 43, 46, 71], "105": [16, 46, 67], "convert": [17, 18, 19, 20, 21, 47, 48, 49, 50, 51, 68, 70, 101, 108], "seri": [18, 25, 53], "plain": [19, 49], "scalar": [19, 49], "convers": [20, 50, 109], "pytorch": [20, 21, 50, 51], "packedlist": [20, 50], "packedmap": [20, 50], "etc": [20, 50], "tensorconvers": [20, 50], "onli": [20, 50, 52, 80, 93], "For": [20, 50, 109], "tap": [20, 50], "label_id": [20, 50], "token_id": [20, 50], "101": [20, 50, 67], "102": [20, 50, 67], "padsequ": [20, 50], "padding_valu": [20, 50], "torcharrowstruct_0": [20, 50], "func": [21, 51], "mini": [21, 51], "batch": [21, 51, 85], "time": [21, 51, 109], "instead": [21, 51], "hint": [21, 51], "percentil": [25, 55], "exclud": [25, 55], "gener": [25, 55, 109], "descript": [25, 55], "statist": [25, 55, 109], "calcul": [25, 55], "25": [25, 55, 65, 81], "50": [25, 55], "75": [25, 55, 73], "white": 25, "limit": [25, 105, 109], "exclus": 25, "omit": 25, "noth": 25, "9": [25, 38, 44, 77, 93], "metric": 25, "mean": [25, 38, 42, 44, 55, 105], "std": [25, 55], "58114": 25, "min": [25, 55, 65, 75, 76], "max": [25, 55, 65, 74], "without": [26, 67], "show": 33, "logarithm": [34, 57], "60944": 34, "693147": 34, "79176": 34, "38629": 34, "07944": 34, "maxim": 36, "minimum": [39, 61], "mapper": 40, "remap": 40, "prescrib": 41, "order": [41, 43, 67, 81], "kwarg": 42, "analog": [42, 52], "sql": [42, 52], "transform": 42, "old": 42, "new": [42, 57, 67], "comput": [42, 83, 100], "special": [42, 52], "symbol": 42, "me": [42, 52], "refer": [42, 52], "posit": [42, 62, 82, 84], "project": [42, 109], "shortcut": 42, "denot": [42, 110], "begin": [42, 69, 106], "add": [42, 67, 69], "xf": [42, 52], "13": [42, 52, 71, 73, 74, 78, 79], "15": 42, "colnam": 42, "ascend": 43, "na_posit": 43, "descend": 43, "comparison": 43, "after": 43, "befor": 43, "standard": 44, "deviat": 44, "19": 45, "condit": 52, "NOT": 52, "satisfi": 52, "set": [52, 67], "p": 52, "equival": [52, 101, 108], "write": 52, "when": [52, 67, 105], "absolut": 53, "round": [54, 56], "upward": 54, "smallest": 54, "integr": [54, 56], "t": [55, 67], "251": 55, "498": 55, "335": 55, "501": 55, "downward": 56, "largest": 56, "maximum": [58, 74, 105], "decim": [62, 93], "place": 62, "neg": [62, 84], "left": [62, 67, 82, 107], "stddev": 63, "creat": [65, 67], "content": [65, 67], "automat": [65, 67], "possibl": [65, 67], "runtim": [65, 67, 109], "scope": [65, 67], "multipl": [65, 67, 109], "gpu": [65, 67], "velox": [65, 67, 109], "vector": [65, 67, 72, 85], "come": [65, 67], "soon": [65, 67], "auto": 65, "arbitrarili": 65, "arbitrari": 65, "fixed_s": 65, "averag": 65, "climat": 65, "per": 65, "contin": 65, "citi": 65, "kei": [65, 67], "yearli": 65, "temperatur": 65, "mf": 65, "helsinki": 65, "21": 65, "moscow": 65, "24": 65, "algier": 65, "kinshasa": 65, "22": [65, 67], "26": 65, "concaten": 66, "particular": 67, "should": [67, 109], "custom": 67, "both": 67, "semant": 67, "construct": 67, "empti": [67, 95, 99], "just": 67, "strongli": 67, "equal": 67, "immut": 67, "except": [67, 109], "alwai": 67, "its": 67, "hasn": 67, "been": 67, "append": [67, 69], "exist": 67, "end": [67, 88], "103": 67, "build": 67, "nest": 67, "df_inner": 67, "b1": [67, 82], "33": 67, "b2": [67, 82], "222": 67, "333": 67, "df_outer": 67, "l": 67, "t1": 67, "t2": 67, "input_col": 69, "listcolumn": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 84, 109], "token": 69, "numericalcolumn": [69, 70, 80, 81, 109], "prepend": 69, "common": [69, 70, 81, 109], "oper": [69, 70, 81, 84, 109, 110], "eo": 69, "bo": 69, "text": [69, 109], "value_col": [70, 81], "border": 70, "recommend": [70, 81, 109], "domain": [70, 81], "dens": 70, "spars": 70, "discret": 70, "num_to_copi": 71, "input_id": [72, 73, 74, 75, 76, 77, 78, 79], "input_id_scor": [72, 77], "matching_id": [72, 73, 74, 75, 76, 77, 78, 79], "matching_id_scor": [72, 75, 76, 77], "cosin": 72, "between": [72, 73, 74, 79], "weight": [72, 75, 76, 77], "id": [72, 73, 74, 75, 76, 77, 78, 79], "input_ids_scor": [72, 77], "score": [72, 75, 76, 77], "second": [72, 73, 74, 75, 76, 77, 78, 79], "matching_ids_scor": [72, 75, 76, 77], "831522": 72, "jaccard_similar": 73, "jaccard": 73, "similar": 73, "intersect": 73, "overlap": [74, 78, 79], "contribut": 74, "among": [75, 76], "get_score_min": 75, "sum": 77, "param": 77, "two": [78, 79, 110], "scale": 80, "sigmoid": 80, "salt": 81, "max_valu": 81, "hash": 81, "indici": 81, "have": 81, "shrunken": 81, "embed": 81, "intial": 81, "random": 81, "process": 81, "60": 81, "54": 81, "67": 81, "cond": 82, "right": [82, 107], "them": 82, "either": [82, 91], "righ": 82, "depend": 82, "a1": 82, "a2": 82, "a3": 82, "a4": 82, "b3": 82, "b4": 82, "start": [84, 98, 104], "stop": [84, 104], "sublist": 84, "yet": [84, 105, 109], "fun": 85, "expect": [85, 109], "work": 85, "repres": 85, "f1": 85, "f2": 85, "abstract": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "pat": [86, 87, 88, 90, 102, 103, 105, 106], "regex": [86, 103], "test": [86, 88, 106, 109], "pattern": [86, 87, 88, 90, 103, 106], "within": 86, "occurr": [87, 90, 103], "match": [88, 106], "sub": 89, "lowest": 89, "find": 90, "see": [90, 109], "re": 90, "charact": [91, 92, 93, 94, 96, 97], "alphanumer": 91, "alphabet": [91, 92], "least": [92, 93], "digit": 93, "lower": 95, "case": [95, 98, 99], "whitespac": [97, 105, 107], "word": 98, "upper": [98, 99], "letter": 98, "stringcolumn": [101, 104, 108, 109], "lowercas": 101, "regular": [102, 105], "repl": 103, "substr": 104, "around": 105, "separ": 105, "delimit": 105, "doe": 105, "do": 105, "interpret": 105, "what": 105, "wonder": 105, "realli": 105, "lead": 107, "trail": 107, "newlin": 107, "side": 107, "uppercas": 108, "part": 109, "open": 109, "sourc": 109, "deep": 109, "learn": 109, "framework": 109, "execut": 109, "describ": 109, "classifi": 109, "releas": 109, "statu": 109, "stabl": 109, "These": 109, "maintain": 109, "long": 109, "term": 109, "major": 109, "perform": 109, "gap": 109, "we": 109, "backward": 109, "compat": 109, "although": 109, "break": 109, "chang": 109, "happen": 109, "notic": 109, "ahead": 109, "beta": 109, "tag": 109, "becaus": 109, "mai": 109, "base": 109, "feedback": 109, "coverag": 109, "across": 109, "complet": 109, "commit": 109, "through": 109, "classif": 109, "howev": 109, "prototyp": 109, "typic": 109, "avail": 109, "binari": 109, "distribut": 109, "pypi": 109, "conda": 109, "sometim": 109, "behind": 109, "run": 109, "flag": 109, "earli": 109, "stage": 109, "creation": 109, "op": 109, "mutat": 109, "relat": [109, 110], "clean": 109, "arithmt": 109, "core": 109, "high": 109, "level": 109, "torchaudio": 109, "torchtext": 109, "torchvis": 109, "torchdata": 109, "torchelast": 109, "torchserv": 109, "xla": 109, "packag": 110, "dimension": 110, "potenti": 110, "heterogen": 110, "addition": 110, "util": 110, "other": 110, "especi": 110, "zero": 110, "copi": 110}, "objects": {"torcharrow": [[0, 0, 1, "", "Column"], [1, 0, 1, "", "DataFrame"], [0, 0, 1, "", "ListColumn"], [0, 0, 1, "", "NumericalColumn"], [0, 0, 1, "", "StringColumn"], [65, 3, 1, "", "column"], [66, 3, 1, "", "concat"], [67, 3, 1, "", "dataframe"], [68, 3, 1, "", "from_arrow"], [82, 3, 1, "", "if_else"]], "torcharrow.Column": [[3, 1, 1, "", "all"], [4, 1, 1, "", "any"], [5, 1, 1, "", "append"], [6, 1, 1, "", "cast"], [0, 2, 1, "", "device"], [7, 1, 1, "", "drop_duplicates"], [8, 1, 1, "", "drop_null"], [0, 2, 1, "", "dtype"], [9, 1, 1, "", "fill_null"], [10, 1, 1, "", "filter"], [11, 1, 1, "", "flatmap"], [12, 1, 1, "", "head"], [13, 1, 1, "", "is_valid_at"], [14, 1, 1, "", "isin"], [0, 2, 1, "", "length"], [15, 1, 1, "", "map"], [0, 2, 1, "", "null_count"], [16, 1, 1, "", "tail"], [17, 1, 1, "", "to_arrow"], [18, 1, 1, "", "to_pandas"], [19, 1, 1, "", "to_pylist"], [20, 1, 1, "", "to_tensor"], [21, 1, 1, "", "transform"]], "torcharrow.DataFrame": [[22, 1, 1, "", "all"], [23, 1, 1, "", "any"], [24, 1, 1, "", "append"], [1, 2, 1, "", "columns"], [25, 1, 1, "", "describe"], [1, 2, 1, "", "device"], [26, 1, 1, "", "drop"], [27, 1, 1, "", "drop_duplicates"], [28, 1, 1, "", "drop_null"], [1, 2, 1, "", "dtype"], [29, 1, 1, "", "fill_null"], [30, 1, 1, "", "filter"], [31, 1, 1, "", "flatmap"], [32, 1, 1, "", "head"], [33, 1, 1, "", "isin"], [1, 2, 1, "", "length"], [34, 1, 1, "", "log"], [35, 1, 1, "", "map"], [36, 1, 1, "", "max"], [37, 1, 1, "", "mean"], [38, 1, 1, "", "median"], [39, 1, 1, "", "min"], [40, 1, 1, "", "rename"], [41, 1, 1, "", "reorder"], [42, 1, 1, "", "select"], [43, 1, 1, "", "sort"], [44, 1, 1, "", "std"], [45, 1, 1, "", "sum"], [46, 1, 1, "", "tail"], [47, 1, 1, "", "to_arrow"], [48, 1, 1, "", "to_pandas"], [49, 1, 1, "", "to_pylist"], [50, 1, 1, "", "to_tensor"], [51, 1, 1, "", "transform"], [52, 1, 1, "", "where"]], "torcharrow.NumericalColumn": [[53, 1, 1, "", "abs"], [54, 1, 1, "", "ceil"], [55, 1, 1, "", "describe"], [56, 1, 1, "", "floor"], [57, 1, 1, "", "log"], [58, 1, 1, "", "max"], [59, 1, 1, "", "mean"], [60, 1, 1, "", "median"], [61, 1, 1, "", "min"], [62, 1, 1, "", "round"], [63, 1, 1, "", "std"], [64, 1, 1, "", "sum"]], "torcharrow.functional": [[69, 3, 1, "", "add_tokens"], [70, 3, 1, "", "bucketize"], [71, 3, 1, "", "firstx"], [72, 3, 1, "", "get_cosine_similarity"], [73, 3, 1, "", "get_jaccard_similarity"], [74, 3, 1, "", "get_max_count"], [75, 3, 1, "", "get_score_max"], [76, 3, 1, "", "get_score_min"], [77, 3, 1, "", "get_score_sum"], [78, 3, 1, "", "has_id_overlap"], [79, 3, 1, "", "id_overlap_count"], [80, 3, 1, "", "scale_to_0_1"], [81, 3, 1, "", "sigrid_hash"]], "torcharrow.ilist_column.ListMethods": [[83, 1, 1, "", "length"], [84, 1, 1, "", "slice"], [85, 1, 1, "", "vmap"]], "torcharrow.istring_column.StringMethods": [[86, 1, 1, "", "contains"], [87, 1, 1, "", "count"], [88, 1, 1, "", "endswith"], [89, 1, 1, "", "find"], [90, 1, 1, "", "findall"], [91, 1, 1, "", "isalnum"], [92, 1, 1, "", "isalpha"], [93, 1, 1, "", "isdecimal"], [94, 1, 1, "", "isdigit"], [95, 1, 1, "", "islower"], [96, 1, 1, "", "isnumeric"], [97, 1, 1, "", "isspace"], [98, 1, 1, "", "istitle"], [99, 1, 1, "", "isupper"], [100, 1, 1, "", "length"], [101, 1, 1, "", "lower"], [102, 1, 1, "", "match"], [103, 1, 1, "", "replace"], [104, 1, 1, "", "slice"], [105, 1, 1, "", "split"], [106, 1, 1, "", "startswith"], [107, 1, 1, "", "strip"], [108, 1, 1, "", "upper"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "function", "Python function"]}, "titleterms": {"torcharrow": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110], "column": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 65], "data": [0, 1], "type": 0, "class": [0, 1], "refer": [0, 109], "numericalcolumn": [0, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], "stringcolumn": 0, "listcolumn": 0, "datafram": [1, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 67], "gener": 1, "api": [1, 109], "function": [1, 2, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "relat": 1, "clean": 1, "convers": [1, 110], "statist": 1, "arithmt": 1, "oper": [1, 2], "velox": 2, "core": 2, "text": 2, "recommend": 2, "high": 2, "level": 2, "all": [3, 22], "ani": [4, 23], "append": [5, 24], "cast": 6, "drop_dupl": [7, 27], "drop_nul": [8, 28], "fill_nul": [9, 29], "filter": [10, 30], "flatmap": [11, 31], "head": [12, 32], "is_valid_at": 13, "isin": [14, 33], "map": [15, 35], "tail": [16, 46], "to_arrow": [17, 47], "to_panda": [18, 48], "to_pylist": [19, 49], "to_tensor": [20, 50], "transform": [21, 51], "describ": [25, 55], "drop": 26, "log": [34, 57], "max": [36, 58], "mean": [37, 59], "median": [38, 60], "min": [39, 61], "renam": 40, "reorder": 41, "select": 42, "sort": 43, "std": [44, 63], "sum": [45, 64], "where": 52, "ab": 53, "ceil": 54, "floor": 56, "round": 62, "concat": 66, "from_arrow": 68, "add_token": 69, "bucket": 70, "firstx": 71, "get_cosine_similar": 72, "get_jaccard_similar": 73, "get_max_count": 74, "get_score_max": 75, "get_score_min": 76, "get_score_sum": 77, "has_id_overlap": 78, "id_overlap_count": 79, "scale_to_0_1": 80, "sigrid_hash": 81, "if_els": 82, "ilist_column": [83, 84, 85], "listmethod": [83, 84, 85], "length": [83, 100], "slice": [84, 104], "vmap": 85, "istring_column": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "stringmethod": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "contain": 86, "count": 87, "endswith": 88, "find": 89, "findal": 90, "isalnum": 91, "isalpha": 92, "isdecim": 93, "isdigit": 94, "islow": 95, "isnumer": 96, "isspac": 97, "istitl": 98, "isupp": 99, "lower": 101, "match": 102, "replac": 103, "split": 105, "startswith": 106, "strip": 107, "upper": 108, "document": 109, "pytorch": 109, "librari": 109, "indic": 109, "creation": 110, "op": 110, "mutat": 110}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"torcharrow.Column": [[0, "torcharrow-column"]], "Data types": [[0, "data-types"]], "Column class reference": [[0, "column-class-reference"]], "NumericalColumn class reference": [[0, "numericalcolumn-class-reference"]], "StringColumn class reference": [[0, "stringcolumn-class-reference"]], "ListColumn class reference": [[0, "listcolumn-class-reference"]], "torcharrow.DataFrame": [[1, "torcharrow-dataframe"]], "DataFrame Class and General APIs": [[1, "dataframe-class-and-general-apis"]], "Functional API": [[1, "functional-api"]], "Relational API": [[1, "relational-api"]], "Data Cleaning": [[1, "data-cleaning"]], "Conversions": [[1, "conversions"]], "Statistics": [[1, "statistics"]], "Arithmtic Operations": [[1, "arithmtic-operations"]], "torcharrow.functional": [[2, "torcharrow-functional"]], "Velox Core Functions": [[2, "velox-core-functions"]], "Text Operations": [[2, "text-operations"]], "Recommendation Operations": [[2, "recommendation-operations"]], "High-level Operations": [[2, "high-level-operations"]], "torcharrow.Column.all": [[3, "torcharrow-column-all"]], "torcharrow.Column.any": [[4, "torcharrow-column-any"]], "torcharrow.Column.append": [[5, "torcharrow-column-append"]], "torcharrow.Column.cast": [[6, "torcharrow-column-cast"]], "torcharrow.Column.drop_duplicates": [[7, "torcharrow-column-drop-duplicates"]], "torcharrow.Column.drop_null": [[8, "torcharrow-column-drop-null"]], "torcharrow.Column.fill_null": [[9, "torcharrow-column-fill-null"]], "torcharrow.Column.filter": [[10, "torcharrow-column-filter"]], "torcharrow.Column.flatmap": [[11, "torcharrow-column-flatmap"]], "torcharrow.Column.head": [[12, "torcharrow-column-head"]], "torcharrow.Column.is_valid_at": [[13, "torcharrow-column-is-valid-at"]], "torcharrow.Column.isin": [[14, "torcharrow-column-isin"]], "torcharrow.Column.map": [[15, "torcharrow-column-map"]], "torcharrow.Column.tail": [[16, "torcharrow-column-tail"]], "torcharrow.Column.to_arrow": [[17, "torcharrow-column-to-arrow"]], "torcharrow.Column.to_pandas": [[18, "torcharrow-column-to-pandas"]], "torcharrow.Column.to_pylist": [[19, "torcharrow-column-to-pylist"]], "torcharrow.Column.to_tensor": [[20, "torcharrow-column-to-tensor"]], "torcharrow.Column.transform": [[21, "torcharrow-column-transform"]], "torcharrow.DataFrame.all": [[22, "torcharrow-dataframe-all"]], "torcharrow.DataFrame.any": [[23, "torcharrow-dataframe-any"]], "torcharrow.DataFrame.append": [[24, "torcharrow-dataframe-append"]], "torcharrow.DataFrame.describe": [[25, "torcharrow-dataframe-describe"]], "torcharrow.DataFrame.drop": [[26, "torcharrow-dataframe-drop"]], "torcharrow.DataFrame.drop_duplicates": [[27, "torcharrow-dataframe-drop-duplicates"]], "torcharrow.DataFrame.drop_null": [[28, "torcharrow-dataframe-drop-null"]], "torcharrow.DataFrame.fill_null": [[29, "torcharrow-dataframe-fill-null"]], "torcharrow.DataFrame.filter": [[30, "torcharrow-dataframe-filter"]], "torcharrow.DataFrame.flatmap": [[31, "torcharrow-dataframe-flatmap"]], "torcharrow.DataFrame.head": [[32, "torcharrow-dataframe-head"]], "torcharrow.DataFrame.isin": [[33, "torcharrow-dataframe-isin"]], "torcharrow.DataFrame.log": [[34, "torcharrow-dataframe-log"]], "torcharrow.DataFrame.map": [[35, "torcharrow-dataframe-map"]], "torcharrow.DataFrame.max": [[36, "torcharrow-dataframe-max"]], "torcharrow.DataFrame.mean": [[37, "torcharrow-dataframe-mean"]], "torcharrow.DataFrame.median": [[38, "torcharrow-dataframe-median"]], "torcharrow.DataFrame.min": [[39, "torcharrow-dataframe-min"]], "torcharrow.DataFrame.rename": [[40, "torcharrow-dataframe-rename"]], "torcharrow.DataFrame.reorder": [[41, "torcharrow-dataframe-reorder"]], "torcharrow.DataFrame.select": [[42, "torcharrow-dataframe-select"]], "torcharrow.DataFrame.sort": [[43, "torcharrow-dataframe-sort"]], "torcharrow.DataFrame.std": [[44, "torcharrow-dataframe-std"]], "torcharrow.DataFrame.sum": [[45, "torcharrow-dataframe-sum"]], "torcharrow.DataFrame.tail": [[46, "torcharrow-dataframe-tail"]], "torcharrow.DataFrame.to_arrow": [[47, "torcharrow-dataframe-to-arrow"]], "torcharrow.DataFrame.to_pandas": [[48, "torcharrow-dataframe-to-pandas"]], "torcharrow.DataFrame.to_pylist": [[49, "torcharrow-dataframe-to-pylist"]], "torcharrow.DataFrame.to_tensor": [[50, "torcharrow-dataframe-to-tensor"]], "torcharrow.DataFrame.transform": [[51, "torcharrow-dataframe-transform"]], "torcharrow.DataFrame.where": [[52, "torcharrow-dataframe-where"]], "torcharrow.NumericalColumn.abs": [[53, "torcharrow-numericalcolumn-abs"]], "torcharrow.NumericalColumn.ceil": [[54, "torcharrow-numericalcolumn-ceil"]], "torcharrow.NumericalColumn.describe": [[55, "torcharrow-numericalcolumn-describe"]], "torcharrow.NumericalColumn.floor": [[56, "torcharrow-numericalcolumn-floor"]], "torcharrow.NumericalColumn.log": [[57, "torcharrow-numericalcolumn-log"]], "torcharrow.NumericalColumn.max": [[58, "torcharrow-numericalcolumn-max"]], "torcharrow.NumericalColumn.mean": [[59, "torcharrow-numericalcolumn-mean"]], "torcharrow.NumericalColumn.median": [[60, "torcharrow-numericalcolumn-median"]], "torcharrow.NumericalColumn.min": [[61, "torcharrow-numericalcolumn-min"]], "torcharrow.NumericalColumn.round": [[62, "torcharrow-numericalcolumn-round"]], "torcharrow.NumericalColumn.std": [[63, "torcharrow-numericalcolumn-std"]], "torcharrow.NumericalColumn.sum": [[64, "torcharrow-numericalcolumn-sum"]], "torcharrow.column": [[65, "torcharrow-column"]], "torcharrow.concat": [[66, "torcharrow-concat"]], "torcharrow.dataframe": [[67, "torcharrow-dataframe"]], "torcharrow.from_arrow": [[68, "torcharrow-from-arrow"]], "torcharrow.functional.add_tokens": [[69, "torcharrow-functional-add-tokens"]], "torcharrow.functional.bucketize": [[70, "torcharrow-functional-bucketize"]], "torcharrow.functional.firstx": [[71, "torcharrow-functional-firstx"]], "torcharrow.functional.get_cosine_similarity": [[72, "torcharrow-functional-get-cosine-similarity"]], "torcharrow.functional.get_jaccard_similarity": [[73, "torcharrow-functional-get-jaccard-similarity"]], "torcharrow.functional.get_max_count": [[74, "torcharrow-functional-get-max-count"]], "torcharrow.functional.get_score_max": [[75, "torcharrow-functional-get-score-max"]], "torcharrow.functional.get_score_min": [[76, "torcharrow-functional-get-score-min"]], "torcharrow.functional.get_score_sum": [[77, "torcharrow-functional-get-score-sum"]], "torcharrow.functional.has_id_overlap": [[78, "torcharrow-functional-has-id-overlap"]], "torcharrow.functional.id_overlap_count": [[79, "torcharrow-functional-id-overlap-count"]], "torcharrow.functional.scale_to_0_1": [[80, "torcharrow-functional-scale-to-0-1"]], "torcharrow.functional.sigrid_hash": [[81, "torcharrow-functional-sigrid-hash"]], "torcharrow.if_else": [[82, "torcharrow-if-else"]], "torcharrow.ilist_column.ListMethods.length": [[83, "torcharrow-ilist-column-listmethods-length"]], "torcharrow.ilist_column.ListMethods.slice": [[84, "torcharrow-ilist-column-listmethods-slice"]], "torcharrow.ilist_column.ListMethods.vmap": [[85, "torcharrow-ilist-column-listmethods-vmap"]], "torcharrow.istring_column.StringMethods.contains": [[86, "torcharrow-istring-column-stringmethods-contains"]], "torcharrow.istring_column.StringMethods.count": [[87, "torcharrow-istring-column-stringmethods-count"]], "torcharrow.istring_column.StringMethods.endswith": [[88, "torcharrow-istring-column-stringmethods-endswith"]], "torcharrow.istring_column.StringMethods.find": [[89, "torcharrow-istring-column-stringmethods-find"]], "torcharrow.istring_column.StringMethods.findall": [[90, "torcharrow-istring-column-stringmethods-findall"]], "torcharrow.istring_column.StringMethods.isalnum": [[91, "torcharrow-istring-column-stringmethods-isalnum"]], "torcharrow.istring_column.StringMethods.isalpha": [[92, "torcharrow-istring-column-stringmethods-isalpha"]], "torcharrow.istring_column.StringMethods.isdecimal": [[93, "torcharrow-istring-column-stringmethods-isdecimal"]], "torcharrow.istring_column.StringMethods.isdigit": [[94, "torcharrow-istring-column-stringmethods-isdigit"]], "torcharrow.istring_column.StringMethods.islower": [[95, "torcharrow-istring-column-stringmethods-islower"]], "torcharrow.istring_column.StringMethods.isnumeric": [[96, "torcharrow-istring-column-stringmethods-isnumeric"]], "torcharrow.istring_column.StringMethods.isspace": [[97, "torcharrow-istring-column-stringmethods-isspace"]], "torcharrow.istring_column.StringMethods.istitle": [[98, "torcharrow-istring-column-stringmethods-istitle"]], "torcharrow.istring_column.StringMethods.isupper": [[99, "torcharrow-istring-column-stringmethods-isupper"]], "torcharrow.istring_column.StringMethods.length": [[100, "torcharrow-istring-column-stringmethods-length"]], "torcharrow.istring_column.StringMethods.lower": [[101, "torcharrow-istring-column-stringmethods-lower"]], "torcharrow.istring_column.StringMethods.match": [[102, "torcharrow-istring-column-stringmethods-match"]], "torcharrow.istring_column.StringMethods.replace": [[103, "torcharrow-istring-column-stringmethods-replace"]], "torcharrow.istring_column.StringMethods.slice": [[104, "torcharrow-istring-column-stringmethods-slice"]], "torcharrow.istring_column.StringMethods.split": [[105, "torcharrow-istring-column-stringmethods-split"]], "torcharrow.istring_column.StringMethods.startswith": [[106, "torcharrow-istring-column-stringmethods-startswith"]], "torcharrow.istring_column.StringMethods.strip": [[107, "torcharrow-istring-column-stringmethods-strip"]], "torcharrow.istring_column.StringMethods.upper": [[108, "torcharrow-istring-column-stringmethods-upper"]], "TorchArrow Documentation": [[109, "torcharrow-documentation"]], "API Reference:": [[109, null]], "PyTorch Libraries": [[109, null]], "Indices": [[109, "indices"]], "torcharrow": [[110, "torcharrow"]], "Creation and Conversion Ops": [[110, "creation-and-conversion-ops"]], "Mutating Ops": [[110, "mutating-ops"]]}, "indexentries": {"column (class in torcharrow)": [[0, "torcharrow.Column"]], "listcolumn (class in torcharrow)": [[0, "torcharrow.ListColumn"]], "numericalcolumn (class in torcharrow)": [[0, "torcharrow.NumericalColumn"]], "stringcolumn (class in torcharrow)": [[0, "torcharrow.StringColumn"]], "device (torcharrow.column attribute)": [[0, "torcharrow.Column.device"]], "dtype (torcharrow.column attribute)": [[0, "torcharrow.Column.dtype"]], "length (torcharrow.column attribute)": [[0, "torcharrow.Column.length"]], "null_count (torcharrow.column attribute)": [[0, "torcharrow.Column.null_count"]], "dataframe (class in torcharrow)": [[1, "torcharrow.DataFrame"]], "columns (torcharrow.dataframe attribute)": [[1, "torcharrow.DataFrame.columns"]], "device (torcharrow.dataframe attribute)": [[1, "torcharrow.DataFrame.device"]], "dtype (torcharrow.dataframe attribute)": [[1, "torcharrow.DataFrame.dtype"]], "length (torcharrow.dataframe attribute)": [[1, "torcharrow.DataFrame.length"]], "all() (torcharrow.column method)": [[3, "torcharrow.Column.all"]], "any() (torcharrow.column method)": [[4, "torcharrow.Column.any"]], "append() (torcharrow.column method)": [[5, "torcharrow.Column.append"]], "cast() (torcharrow.column method)": [[6, "torcharrow.Column.cast"]], "drop_duplicates() (torcharrow.column method)": [[7, "torcharrow.Column.drop_duplicates"]], "drop_null() (torcharrow.column method)": [[8, "torcharrow.Column.drop_null"]], "fill_null() (torcharrow.column method)": [[9, "torcharrow.Column.fill_null"]], "filter() (torcharrow.column method)": [[10, "torcharrow.Column.filter"]], "flatmap() (torcharrow.column method)": [[11, "torcharrow.Column.flatmap"]], "head() (torcharrow.column method)": [[12, "torcharrow.Column.head"]], "is_valid_at() (torcharrow.column method)": [[13, "torcharrow.Column.is_valid_at"]], "isin() (torcharrow.column method)": [[14, "torcharrow.Column.isin"]], "map() (torcharrow.column method)": [[15, "torcharrow.Column.map"]], "tail() (torcharrow.column method)": [[16, "torcharrow.Column.tail"]], "to_arrow() (torcharrow.column method)": [[17, "torcharrow.Column.to_arrow"]], "to_pandas() (torcharrow.column method)": [[18, "torcharrow.Column.to_pandas"]], "to_pylist() (torcharrow.column method)": [[19, "torcharrow.Column.to_pylist"]], "to_tensor() (torcharrow.column method)": [[20, "torcharrow.Column.to_tensor"]], "transform() (torcharrow.column method)": [[21, "torcharrow.Column.transform"]], "all() (torcharrow.dataframe method)": [[22, "torcharrow.DataFrame.all"]], "any() (torcharrow.dataframe method)": [[23, "torcharrow.DataFrame.any"]], "append() (torcharrow.dataframe method)": [[24, "torcharrow.DataFrame.append"]], "describe() (torcharrow.dataframe method)": [[25, "torcharrow.DataFrame.describe"]], "drop() (torcharrow.dataframe method)": [[26, "torcharrow.DataFrame.drop"]], "drop_duplicates() (torcharrow.dataframe method)": [[27, "torcharrow.DataFrame.drop_duplicates"]], "drop_null() (torcharrow.dataframe method)": [[28, "torcharrow.DataFrame.drop_null"]], "fill_null() (torcharrow.dataframe method)": [[29, "torcharrow.DataFrame.fill_null"]], "filter() (torcharrow.dataframe method)": [[30, "torcharrow.DataFrame.filter"]], "flatmap() (torcharrow.dataframe method)": [[31, "torcharrow.DataFrame.flatmap"]], "head() (torcharrow.dataframe method)": [[32, "torcharrow.DataFrame.head"]], "isin() (torcharrow.dataframe method)": [[33, "torcharrow.DataFrame.isin"]], "log() (torcharrow.dataframe method)": [[34, "torcharrow.DataFrame.log"]], "map() (torcharrow.dataframe method)": [[35, "torcharrow.DataFrame.map"]], "max() (torcharrow.dataframe method)": [[36, "torcharrow.DataFrame.max"]], "mean() (torcharrow.dataframe method)": [[37, "torcharrow.DataFrame.mean"]], "median() (torcharrow.dataframe method)": [[38, "torcharrow.DataFrame.median"]], "min() (torcharrow.dataframe method)": [[39, "torcharrow.DataFrame.min"]], "rename() (torcharrow.dataframe method)": [[40, "torcharrow.DataFrame.rename"]], "reorder() (torcharrow.dataframe method)": [[41, "torcharrow.DataFrame.reorder"]], "select() (torcharrow.dataframe method)": [[42, "torcharrow.DataFrame.select"]], "sort() (torcharrow.dataframe method)": [[43, "torcharrow.DataFrame.sort"]], "std() (torcharrow.dataframe method)": [[44, "torcharrow.DataFrame.std"]], "sum() (torcharrow.dataframe method)": [[45, "torcharrow.DataFrame.sum"]], "tail() (torcharrow.dataframe method)": [[46, "torcharrow.DataFrame.tail"]], "to_arrow() (torcharrow.dataframe method)": [[47, "torcharrow.DataFrame.to_arrow"]], "to_pandas() (torcharrow.dataframe method)": [[48, "torcharrow.DataFrame.to_pandas"]], "to_pylist() (torcharrow.dataframe method)": [[49, "torcharrow.DataFrame.to_pylist"]], "to_tensor() (torcharrow.dataframe method)": [[50, "torcharrow.DataFrame.to_tensor"]], "transform() (torcharrow.dataframe method)": [[51, "torcharrow.DataFrame.transform"]], "where() (torcharrow.dataframe method)": [[52, "torcharrow.DataFrame.where"]], "abs() (torcharrow.numericalcolumn method)": [[53, "torcharrow.NumericalColumn.abs"]], "ceil() (torcharrow.numericalcolumn method)": [[54, "torcharrow.NumericalColumn.ceil"]], "describe() (torcharrow.numericalcolumn method)": [[55, "torcharrow.NumericalColumn.describe"]], "floor() (torcharrow.numericalcolumn method)": [[56, "torcharrow.NumericalColumn.floor"]], "log() (torcharrow.numericalcolumn method)": [[57, "torcharrow.NumericalColumn.log"]], "max() (torcharrow.numericalcolumn method)": [[58, "torcharrow.NumericalColumn.max"]], "mean() (torcharrow.numericalcolumn method)": [[59, "torcharrow.NumericalColumn.mean"]], "median() (torcharrow.numericalcolumn method)": [[60, "torcharrow.NumericalColumn.median"]], "min() (torcharrow.numericalcolumn method)": [[61, "torcharrow.NumericalColumn.min"]], "round() (torcharrow.numericalcolumn method)": [[62, "torcharrow.NumericalColumn.round"]], "std() (torcharrow.numericalcolumn method)": [[63, "torcharrow.NumericalColumn.std"]], "sum() (torcharrow.numericalcolumn method)": [[64, "torcharrow.NumericalColumn.sum"]], "column() (in module torcharrow)": [[65, "torcharrow.column"]], "concat() (in module torcharrow)": [[66, "torcharrow.concat"]], "dataframe() (in module torcharrow)": [[67, "torcharrow.dataframe"]], "from_arrow() (in module torcharrow)": [[68, "torcharrow.from_arrow"]], "add_tokens() (in module torcharrow.functional)": [[69, "torcharrow.functional.add_tokens"]], "bucketize() (in module torcharrow.functional)": [[70, "torcharrow.functional.bucketize"]], "firstx() (in module torcharrow.functional)": [[71, "torcharrow.functional.firstx"]], "get_cosine_similarity() (in module torcharrow.functional)": [[72, "torcharrow.functional.get_cosine_similarity"]], "get_jaccard_similarity() (in module torcharrow.functional)": [[73, "torcharrow.functional.get_jaccard_similarity"]], "get_max_count() (in module torcharrow.functional)": [[74, "torcharrow.functional.get_max_count"]], "get_score_max() (in module torcharrow.functional)": [[75, "torcharrow.functional.get_score_max"]], "get_score_min() (in module torcharrow.functional)": [[76, "torcharrow.functional.get_score_min"]], "get_score_sum() (in module torcharrow.functional)": [[77, "torcharrow.functional.get_score_sum"]], "has_id_overlap() (in module torcharrow.functional)": [[78, "torcharrow.functional.has_id_overlap"]], "id_overlap_count() (in module torcharrow.functional)": [[79, "torcharrow.functional.id_overlap_count"]], "scale_to_0_1() (in module torcharrow.functional)": [[80, "torcharrow.functional.scale_to_0_1"]], "sigrid_hash() (in module torcharrow.functional)": [[81, "torcharrow.functional.sigrid_hash"]], "if_else() (in module torcharrow)": [[82, "torcharrow.if_else"]], "length() (torcharrow.ilist_column.listmethods method)": [[83, "torcharrow.ilist_column.ListMethods.length"]], "slice() (torcharrow.ilist_column.listmethods method)": [[84, "torcharrow.ilist_column.ListMethods.slice"]], "vmap() (torcharrow.ilist_column.listmethods method)": [[85, "torcharrow.ilist_column.ListMethods.vmap"]], "contains() (torcharrow.istring_column.stringmethods method)": [[86, "torcharrow.istring_column.StringMethods.contains"]], "count() (torcharrow.istring_column.stringmethods method)": [[87, "torcharrow.istring_column.StringMethods.count"]], "endswith() (torcharrow.istring_column.stringmethods method)": [[88, "torcharrow.istring_column.StringMethods.endswith"]], "find() (torcharrow.istring_column.stringmethods method)": [[89, "torcharrow.istring_column.StringMethods.find"]], "findall() (torcharrow.istring_column.stringmethods method)": [[90, "torcharrow.istring_column.StringMethods.findall"]], "isalnum() (torcharrow.istring_column.stringmethods method)": [[91, "torcharrow.istring_column.StringMethods.isalnum"]], "isalpha() (torcharrow.istring_column.stringmethods method)": [[92, "torcharrow.istring_column.StringMethods.isalpha"]], "isdecimal() (torcharrow.istring_column.stringmethods method)": [[93, "torcharrow.istring_column.StringMethods.isdecimal"]], "isdigit() (torcharrow.istring_column.stringmethods method)": [[94, "torcharrow.istring_column.StringMethods.isdigit"]], "islower() (torcharrow.istring_column.stringmethods method)": [[95, "torcharrow.istring_column.StringMethods.islower"]], "isnumeric() (torcharrow.istring_column.stringmethods method)": [[96, "torcharrow.istring_column.StringMethods.isnumeric"]], "isspace() (torcharrow.istring_column.stringmethods method)": [[97, "torcharrow.istring_column.StringMethods.isspace"]], "istitle() (torcharrow.istring_column.stringmethods method)": [[98, "torcharrow.istring_column.StringMethods.istitle"]], "isupper() (torcharrow.istring_column.stringmethods method)": [[99, "torcharrow.istring_column.StringMethods.isupper"]], "length() (torcharrow.istring_column.stringmethods method)": [[100, "torcharrow.istring_column.StringMethods.length"]], "lower() (torcharrow.istring_column.stringmethods method)": [[101, "torcharrow.istring_column.StringMethods.lower"]], "match() (torcharrow.istring_column.stringmethods method)": [[102, "torcharrow.istring_column.StringMethods.match"]], "replace() (torcharrow.istring_column.stringmethods method)": [[103, "torcharrow.istring_column.StringMethods.replace"]], "slice() (torcharrow.istring_column.stringmethods method)": [[104, "torcharrow.istring_column.StringMethods.slice"]], "split() (torcharrow.istring_column.stringmethods method)": [[105, "torcharrow.istring_column.StringMethods.split"]], "startswith() (torcharrow.istring_column.stringmethods method)": [[106, "torcharrow.istring_column.StringMethods.startswith"]], "strip() (torcharrow.istring_column.stringmethods method)": [[107, "torcharrow.istring_column.StringMethods.strip"]], "upper() (torcharrow.istring_column.stringmethods method)": [[108, "torcharrow.istring_column.StringMethods.upper"]]}})